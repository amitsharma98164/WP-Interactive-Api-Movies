{"version":3,"file":"e2e/page-1.js","mappings":"iKAEAA,EAAAA,EAAAA,GAAM,CACLC,MAAO,CACNC,WAAW,EACXC,YAAY,EACZC,KAAM,UAEPC,QAAS,CACRC,cAAe,EAAGC,aACVC,KAAKC,UAAUF,OAASG,EAAW,IAG5CC,QAAS,CACRC,gBAAiB,EAAGX,YACnBA,EAAMC,WAAaD,EAAMC,SAAS,EAEnCW,iBAAkB,EAAGZ,YACpBA,EAAME,YAAcF,EAAME,UAAU,EAErCW,wBAAyB,EAAGP,cAC3BA,EAAQJ,YAAcI,EAAQJ,UAAU,EAEzCY,cAAe,EAAGR,UAASS,YAC1B,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAMG,QACvBC,KAAQC,GAAQJ,EAAKK,MAAM,KAAKC,UAC3BF,EAAKG,aAAY,CAACC,EAAGC,IAAMD,EAAEC,IAAInB,GACzCa,GAAOF,CAAK,EAEjBS,gBAAiB,EAAG1B,YACnBA,EAAMG,KAAsB,WAAfH,EAAMG,KAAoB,SAAW,QAAQ,EAE3DwB,kBAAmB,EAAGrB,cACrBA,EAAQH,KAAwB,WAAjBG,EAAQH,KAAoB,SAAW,QAAQ,MAMjEJ,EAAAA,EAAAA,GAAM,CACLC,MAAO,CACN4B,QAAS,CAGRC,OAAQ,EAAG7B,WAAkC,EAAtBA,EAAM4B,QAAQX,MACrCa,OAAQ,IAGVpB,QAAS,CACRkB,QAAS,CACRG,UAAW,EAAG/B,YACbA,EAAM4B,QAAQX,OAAS,EACvBjB,EAAM4B,QAAQE,QAAU,CAAC,K,2FClD7B,MAAME,EAAYC,GACjBA,GAAwB,iBAATA,IAAsBC,MAAMC,QAAQF,GAEvCG,EAAY,CAAClB,EAAQmB,KACjC,GAAIL,EAASd,IAAWc,EAASK,GAChC,IAAK,MAAMlB,KAAOkB,EACbL,EAASK,EAAOlB,KACdD,EAAOC,IAAMmB,OAAOC,OAAOrB,EAAQ,CAAE,CAACC,GAAM,CAAC,IAClDiB,EAAUlB,EAAOC,GAAMkB,EAAOlB,KAE9BmB,OAAOC,OAAOrB,EAAQ,CAAE,CAACC,GAAMkB,EAAOlB,IAGzC,EAoBKqB,EAjBqB,MAE1B,MAAMC,EAAWC,SAASC,cACxB,yCAEF,IAAKF,EAAU,MAAO,CAAC,EACvB,IACC,MAAM,MAAEzC,GAAUO,KAAKqC,MAAMH,EAASI,aACtC,GAAIb,EAAShC,GAAQ,OAAOA,EAC5B,MAAM8C,MAAM,gCAIb,CAHE,MAAOC,GAERC,QAAQC,IAAIF,EACb,CACA,MAAO,CAAC,CAAC,EAGOG,GACJC,EAAW,CAAEnD,OAAOoD,EAAAA,EAAAA,IAAWZ,IAEtB,oBAAXa,SAAwBA,OAAOtD,MAAQoD,GAE3C,MAAMpD,EAAQ,EAAGC,WAAUsD,MACjClB,EAAUe,EAAUG,GACpBlB,EAAUI,EAAUxC,EAAM,C","sources":["webpack://__experimentalInteractivity/./e2e/page-1/store.js","webpack://__experimentalInteractivity/./src/runtime/store.js"],"sourcesContent":["import { store } from '../../src/runtime/store';\n\nstore({\n\tstate: {\n\t\ttrueValue: true,\n\t\tfalseValue: false,\n\t\ttext: 'Text 1',\n\t},\n\tderived: {\n\t\trenderContext: ({ context }) => {\n\t\t\treturn JSON.stringify(context, undefined, 2);\n\t\t},\n\t},\n\tactions: {\n\t\ttoggleTrueValue: ({ state }) => {\n\t\t\tstate.trueValue = !state.trueValue;\n\t\t},\n\t\ttoggleFalseValue: ({ state }) => {\n\t\t\tstate.falseValue = !state.falseValue;\n\t\t},\n\t\ttoggleContextFalseValue: ({ context }) => {\n\t\t\tcontext.falseValue = !context.falseValue;\n\t\t},\n\t\tupdateContext: ({ context, event }) => {\n\t\t\tconst { name, value } = event.target;\n\t\t\tconst [key, ...path] = name.split('.').reverse();\n\t\t\tconst obj = path.reduceRight((o, k) => o[k], context);\n\t\t\tobj[key] = value;\n\t\t},\n\t\ttoggleStateText: ({ state }) => {\n\t\t\tstate.text = state.text === 'Text 1' ? 'Text 2' : 'Text 1';\n\t\t},\n\t\ttoggleContextText: ({ context }) => {\n\t\t\tcontext.text = context.text === 'Text 1' ? 'Text 2' : 'Text 1';\n\t\t},\n\t},\n});\n\n// State for the store hydration tests.\nstore({\n\tstate: {\n\t\tcounter: {\n\t\t\t// TODO: replace this with a getter.\n\t\t\t// `value` is defined in the server.\n\t\t\tdouble: ({ state }) => state.counter.value * 2,\n\t\t\tclicks: 0,\n\t\t},\n\t},\n\tactions: {\n\t\tcounter: {\n\t\t\tincrement: ({ state }) => {\n\t\t\t\tstate.counter.value += 1;\n\t\t\t\tstate.counter.clicks += 1;\n\t\t\t},\n\t\t},\n\t},\n});\n","import { deepSignal } from 'deepsignal';\n\nconst isObject = (item) =>\n\titem && typeof item === 'object' && !Array.isArray(item);\n\nexport const deepMerge = (target, source) => {\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\tif (isObject(source[key])) {\n\t\t\t\tif (!target[key]) Object.assign(target, { [key]: {} });\n\t\t\t\tdeepMerge(target[key], source[key]);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] });\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst getSerializedState = () => {\n\t// TODO: change the store tag ID for a better one.\n\tconst storeTag = document.querySelector(\n\t\t`script[type=\"application/json\"]#store`\n\t);\n\tif (!storeTag) return {};\n\ttry {\n\t\tconst { state } = JSON.parse(storeTag.textContent);\n\t\tif (isObject(state)) return state;\n\t\tthrow Error('Parsed state is not an object');\n\t} catch (e) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.log(e);\n\t}\n\treturn {};\n};\n\nconst rawState = getSerializedState();\nexport const rawStore = { state: deepSignal(rawState) };\n\nif (typeof window !== 'undefined') window.store = rawStore;\n\nexport const store = ({ state, ...block }) => {\n\tdeepMerge(rawStore, block);\n\tdeepMerge(rawState, state);\n};\n"],"names":["store","state","trueValue","falseValue","text","derived","renderContext","context","JSON","stringify","undefined","actions","toggleTrueValue","toggleFalseValue","toggleContextFalseValue","updateContext","event","name","value","target","key","path","split","reverse","reduceRight","o","k","toggleStateText","toggleContextText","counter","double","clicks","increment","isObject","item","Array","isArray","deepMerge","source","Object","assign","rawState","storeTag","document","querySelector","parse","textContent","Error","e","console","log","getSerializedState","rawStore","deepSignal","window","block"],"sourceRoot":""}